<?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper 
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.is.web.bmw.sql.PlansMapper">
<!-- 	<insert id="addStatist" parameterType="com.is.web.bmw.entity.sql.entity.Statist" useGeneratedKeys="true" keyProperty="statist.id">
		insert into <include refid="table" />(
			id
			<if test="statist.ymd!=null">,ymd</if>
			<if test="statist.pageview!=null">,pageview</if>
			<if test="statist.userview!=null">,userview</if>
			
		)values(
			#{statist.id}
			<if test="statist.ymd!=null">,#{statist.ymd}</if>
			<if test="statist.pageview!=null">,#{statist.pageview}</if>
			<if test="statist.userview!=null">,#{statist.userview}</if>
			
		)
	</insert>
	 -->
<!--	<delete id="delPersonsByPrimaryKey" parameterType="Integer">
		delete from <include refid="table" />
		where 
			id=#{id}
	</delete> -->	
	
	<!-- <update id="updStatistByPrimaryKey" parameterType="com.is.web.bmw.entity.sql.entity.Statist">
		update <include refid="table" />	TA
		<include refid="update" /> 
		where 
		id=#{statist.id}
	</update>
	 -->
	<!-- <update id="updStatistByYmd" parameterType="com.is.web.bmw.entity.sql.entity.Statist">
		update t_statist set userview = userview+1	TA
		<include refid="update" /> 
		where 
		ymd=#{statist.ymd}
	</update>
 -->
	<select id="getResultForSelectParamBySearch" parameterType="String" resultType="Map">
		select ${selectParam} TA
		<where> 
		</where>
		<include refid="groupbys" />
		<include refid="orderbys" />	
	</select>
	
	
	
	<select id="getResultForSelectParam" parameterType="String" resultType="Map">
		select ${selectParam} 
	</select>
	
	<select id="getPlansByPrimaryKey" parameterType="com.is.web.bmw.entity.sql.entity.Plans" resultMap="plansMapper">
		<include refid="selectSql" />
		where 
					TA.id=#{plans.id}
	</select>
		
	<select id="getAllPlansBySearch" parameterType="com.is.web.bmw.entity.sql.entity.Plans" resultMap="plansMapper">
		<include refid="selectSql" /> 
		<where> 
		</where>
		<include refid="groupbys" />
		<include refid="orderbys" />
	</select>

	<select id="getAllPlansBySearchKey" parameterType="List" resultMap="plansMapper">
		<include refid="PlansWithSearchKeyByPage" />
		<include refid="groupbys" />
		<include refid="orderbys" />
	</select>
	
	<select id="getAllPlansByPage" parameterType="com.is.web.bmw.entity.sql.entity.Plans" resultMap="plansMapper">
		<include refid="selectSql" /> 
		<where> 
		</where>
		<include refid="groupbys" />
		<include refid="orderbys" />
		<include refid="pageLimit" />
	</select>
	
	<select id="getCountForPage" parameterType="com.is.web.bmw.entity.sql.entity.Plans" resultType="int">
		select count(id) from <include refid="table" /> TA 
		<where> 
		</where>
	</select>
	
	<select id="getAllPlansWithSearchKeyByPage" parameterType="List" resultMap="plansMapper">
		<include refid="PlansWithSearchKeyByPage" />
		<include refid="groupbys" />
		<include refid="orderbys" />
		<include refid="pageLimit" />
	</select>
	
	<select id="getCountWithSearchKeyForPage" parameterType="List" resultType="int">
		select count(id) from (
			<include refid="PlansWithSearchKeyByPage" />
		) TSUM
	</select>
	
	<resultMap id="plansMapper" type="com.is.web.bmw.entity.sql.entity.Plans">
        <id property="id" column="id" />		<!-- id -->
        <result property="name" column="name" />		<!-- name -->
                <result property="count" column="count" />		<!-- count -->
            </resultMap>
    
    <sql id="PlansWithSearchKeyByPage">
		<foreach item="plans" index="index" collection="plansList" separator="UNION">
		<include refid="selectSql" /> 
		<where> 
		</where>
		</foreach>
	</sql>
	
	<sql id="table">
		t_plans
	</sql>

	<sql id="selectColum">
		<choose>
		<when test="plans.selectCols!=null and plans.selectCols.size>0">
		<foreach item="item" index="index" collection="plans.selectCols" open="" separator="," close="">${item}</foreach>
		</when>
		<otherwise>
			id,name,count
		</otherwise>
		</choose>
	</sql>
	
	<sql id="selectSql">
		select <include refid="selectColum" /> 
		from <include refid="table" /> TA
	</sql>
	
	<!-- <sql id="qualification">
	<if test="null!=statist">
			<if test="persons.id!=null or 
					persons.compareCols.idBetweenType!=null or
    				persons.compareCols.idGreaterThan!=null or
    				persons.compareCols.idLessThan!=null"> and  
    				<choose>
    					<when test="persons.compareCols.idGreaterThan!=null
	        					and persons.compareCols.idLessThan!=null
	        					and persons.compareCols.idBetweenType!=null">
	        				<![CDATA[#{persons.compareCols.idGreaterThan} < TA.id ]]>
	        				<choose><when test="persons.compareCols.idBetweenType=='and'"> and </when><otherwise> or </otherwise></choose>
	        				<![CDATA[#{persons.compareCols.idLessThan} > TA.id]]>
	        			</when>
    					<when test="persons.compareCols.idGreaterThan!=null
	        					and persons.compareCols.idLessThan!=null">
	        				<choose>
	        				<when test="persons.compareCols.idGreaterThan==persons.compareCols.idLessThan">
	        					TA.id =#{persons.idGreaterThan}
	        				</when>
	        				<otherwise>
		        				<![CDATA[#{persons.compareCols.idGreaterThan} < TA.id ]]>
	        				<choose><when test="persons.compareCols.idGreaterThan>persons.compareCols.idLessThan"> or </when><otherwise> and </otherwise></choose>
	        				<![CDATA[#{persons.compareCols.idLessThan} > TA.id]]>
	        				</otherwise>
	        				</choose>
	        			</when>
    					<when test="persons.compareCols.idGreaterThan!=null">
	        				<![CDATA[#{persons.compareCols.idGreaterThan} < TA.id]]>
	        			</when>
    					<when test="persons.compareCols.idLessThan!=null">
	        				<![CDATA[#{persons.compareCols.idLessThan} > TA.id]]>
	        			</when>
	        			<otherwise>
	        				TA.id =#{persons.id}
	        			</otherwise>
    				</choose>
			</if>
			<if test="persons.compareCols.idMults!=null and persons.compareCols.idMults.length>0"> and  
	        		TA.id in <foreach item="item" index="index" collection="persons.compareCols.idMults" open="(" separator="," close=")">#{item}</foreach>
			</if>
			<if test="persons.compareCols.idStr!=null"> and  
	        		TA.id like concat('%','#{persons.compareCols.idStr}','%')
			</if>

		<if test="statist.ymd!=null and statist.ymd!=''"> and  
			<choose>
				<when test="statist.ymd.indexOf(' ')>=0">
        			<foreach item="item" index="index" collection="statist.ymd.split(' ')" open="(" separator=" " close=")"><if test="index>0"> or </if> TA.ymd like concat('%',${item},'%') </foreach>
        		</when>
        		<when test="statist.ymd.indexOf('+')>=0">
        			TA.ymd like concat('%','${statist.ymd.replace("+", "%")}','%')
        		</when>
        		<when test="statist.ymd.startsWith('!')">
        			TA.ymd !='${statist.ymd.replace("!", "")}'
        		</when>
				<when test="statist.ymd.startsWith('=')">
        			TA.ymd ='${statist.ymd.replace("=", "")}'
        		</when>
        		<otherwise>
        			TA.ymd like concat('%','${statist.ymd.replace("%", "")}','%')
        		</otherwise>
			</choose>
		</if>

		<if test="statist.pageview!=null and statist.pageview!=''"> and  
			<choose>
				<when test="statist.pageview.indexOf(' ')>=0">
        			<foreach item="item" index="index" collection="statist.pageview.split(' ')" open="(" separator=" " close=")"><if test="index>0"> or </if> TA.pageview like concat('%',${item},'%') </foreach>
        		</when>
        		<when test="statist.pageview.indexOf('+')>=0">
        			TA.pageview like concat('%','${statist.pageview.replace("+", "%")}','%')
        		</when>
        		<when test="statist.pageview.startsWith('!')">
        			TA.pageview !='${statist.pageview.replace("!", "")}'
        		</when>
				<when test="statist.pageview.startsWith('=')">
        			TA.pageview ='${statist.pageview.replace("=", "")}'
        		</when>
        		<otherwise>
        			TA.pageview like concat('%','${statist.pageview.replace("%", "")}','%')
        		</otherwise>
			</choose>
		</if>

		<if test="statist.userview!=null and statist.userview!=''"> and  
			<choose>
				<when test="statist.userview.indexOf(' ')>=0">
        			<foreach item="item" index="index" collection="statist.userview.split(' ')" open="(" separator=" " close=")"><if test="index>0"> or </if> TA.userview like concat('%',${item},'%') </foreach>
        		</when>
        		<when test="statist.userview.indexOf('+')>=0">
        			TA.userview like concat('%','${statist.userview.replace("+", "%")}','%')
        		</when>
        		<when test="statist.userview.startsWith('!')">
        			TA.userview !='${statist.userview.replace("!", "")}'
        		</when>
				<when test="statist.userview.startsWith('=')">
        			TA.userview ='${statist.userview.replace("=", "")}'
        		</when>
        		<otherwise>
        			TA.statist like concat('%','${statist.userview.replace("%", "")}','%')
        		</otherwise>
			</choose>
		</if>
	</if>
	
	<include refid="isNullColum" />
	</sql> -->
	
	<sql id="isNullColum">
		<if test="plans.isNullCols!=null and plans.isNullCols.size>0">
		<foreach item="item" index="index" collection="plans.isNullCols" open="" separator=" " close=""> and (${item} IS NULL || ${item}='')</foreach>
		</if>
	</sql>
	
	<!-- <sql id="update">
	<set>
		主键不作为查询条件传入不更新,
		TA.id=#{persons.id}, 
		
		<if test="null!=statist.ymd"> 
			TA.ymd=#{statist.ymd}, 
		</if>
		<if test="null!=statist.pageview"> 
			TA.pageview=#{statist.pageview}, 
		</if>
		<if test="null!=statist.userview"> 
			TA.userview=#{statist.userview}, 
		</if>
	</set>
	</sql> -->


	<sql id="orderbys">
		<if test="null!= plans and null!= plans.orderBys and statist.orderBys.size>0">
			order by
				${plans.orderBys.TABLEORDERBYSTR}
		</if>
	</sql>
	
	<sql id="groupbys">
		<if test="null!= plans and null!= plans.groupBys and plans.groupBys!=''">
			group by
				${plans.groupBys}
		</if>
	</sql>
	
	<!-- BEGIN 字典字段转换检索 -->
	<!-- END 字典字段转换检索 -->
	
	<sql id="startSql">
		select * from (
	</sql>

	<sql id="endSql">
		 ) b <include refid="pageLimit" />
	</sql>

	<sql id="pageLimit">
		<![CDATA[ limit ${startIndex},${endIndex}]]>
	</sql>

</mapper>